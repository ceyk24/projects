
                printf("Suche nach id: ");
                scanf("%ld%*c", &search);
                printf("\n\n");

                editTransistor(transistor, NMAX, search);
                break;

 

void editTransistor(Transistor_t transistor[], long len, long id)
{

    int i;
    int found = 0;
    char toChange = 'n';

    for(i=0;i<len;i++)
    {
        /* Hinweis
        In der anderen Gruppe sind zwei Strings zu vergleichen. Am besten die
        Funktion strcmp(string1, string2) aus string.h verwenden. Liefert 0
        zuerueck wenn beide Strings gleich sind
        */

        if(transistor[i].id == id)
        {
            found = 1;
            break;
        }
    }

    // i enthaelt jetzt den Index des gefundenen Eintrags


    if(found == 1)
    {
        printf("Eintrag gefunden:\n\n");

        printTransistor(transistor[i]);
        printf("\n");

        printf("Eintrag aendern? [j/n]: ");
        scanf("%c", &toChange);

    }
    else
    {

        for(i=0;i<len;i++)
        {
            if(transistor[i].type[0] == 0)
            {
                toChange = 'j';
                break;
            }

        }

        // i enthaelt jetzt den Index des freien Platzes

        if(i == len)
            printf("Keine freien Plaetze!\n\n");
        else
            printf("Kein Eintrag gefunden. Neuer Eintrag:\n\n");
    }


    if(toChange == 'j')
    {
        printf("Type: ");
        // Kein & Adressoperator da type schon ein Pointer ist
        scanf("%s%*c", transistor[i].type);

        printf("id: ");
        scanf("%lf%*c", &transistor[i].id);

        printf("Vth: ");
        scanf("%lf%*c", &transistor[i].characteristics.vth);

        printf("W: ");
        scanf("%lf%*c", &transistor[i].characteristics.W);

        printf("L: ");
        scanf("%lf%*c", &transistor[i].characteristics.L);

        printf("tox: ");
        scanf("%lf%*c", &transistor[i].characteristics.tox);
    }

}

